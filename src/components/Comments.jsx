import React, { useState, useEffect } from 'react';
import { getComments, addComment, deleteComment } from '../api/comments';
import '../styles/Comments.css';

function Comments({ videoId }) {
  const [comments, setComments] = useState([]);
  const [newComment, setNewComment] = useState('');
  const [replyTo, setReplyTo] = useState(null);
  const [replyToAuthor, setReplyToAuthor] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    loadComments();
  }, [videoId]);

  const loadComments = async () => {
    try {
      setLoading(true);
      const fetchedComments = await getComments(videoId);
      setComments(fetchedComments);
      setError(null);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!newComment.trim()) return;

    try {
      const commentData = {
        text: newComment.trim(),
        author: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–º—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        parentId: replyTo
      };

      const addedComment = await addComment(videoId, commentData);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
      if (replyTo) {
        // –î–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        const parentIndex = comments.findIndex(c => c._id === replyTo);
        if (parentIndex !== -1) {
          const newComments = [...comments];
          newComments.splice(parentIndex + 1, 0, addedComment);
          setComments(newComments);
        }
      } else {
        // –î–ª—è –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
        setComments(prev => [addedComment, ...prev]);
      }
      
      setNewComment('');
      setReplyTo(null);
      setReplyToAuthor('');
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', err);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π');
    }
  };

  const handleDelete = async (commentId) => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?')) {
      return;
    }

    try {
      await deleteComment(commentId);
      setComments(prev => prev.filter(comment => 
        comment._id !== commentId && comment.parentId !== commentId
      ));
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', err);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π');
    }
  };

  const handleReply = (comment) => {
    setReplyTo(comment._id);
    setReplyToAuthor(comment.author);
    setNewComment(`@${comment.author} `);
    // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ
    document.querySelector('.comment-form textarea').focus();
  };

  const renderComment = (comment) => {
    const replies = comments.filter(c => c.parentId === comment._id);
    const isReply = comment.parentId !== null;

    return (
      <div key={comment._id} className={`comment ${isReply ? 'reply' : ''}`}>
        <div className="comment-header">
          <span className="comment-author">{comment.author}</span>
          <span className="comment-date">
            {new Date(comment.createdAt).toLocaleString()}
          </span>
        </div>
        <div className="comment-text">{comment.text}</div>
        <div className="comment-actions">
          {!isReply && (
            <button 
              className="reply-button"
              onClick={() => handleReply(comment)}
              title="–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
            >
              üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å
            </button>
          )}
          <button 
            className="delete-button"
            onClick={() => handleDelete(comment._id)}
            title="–£–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
          >
            üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
          </button>
        </div>
        {replies.length > 0 && (
          <div className="replies">
            {replies.map(reply => renderComment(reply))}
          </div>
        )}
      </div>
    );
  };

  if (loading) {
    return <div className="comments-loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...</div>;
  }

  if (error) {
    return <div className="comments-error">{error}</div>;
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
  const rootComments = comments
    .filter(comment => !comment.parentId)
    .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

  return (
    <div className="comments-section">
      <h3>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏</h3>
      
      <form onSubmit={handleSubmit} className="comment-form">
        <textarea
          value={newComment}
          onChange={(e) => setNewComment(e.target.value)}
          placeholder={replyTo ? `–û—Ç–≤–µ—Ç –¥–ª—è ${replyToAuthor}...` : "–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..."}
          required
        />
        <div className="form-actions">
          {replyTo && (
            <button 
              type="button" 
              className="cancel-button"
              onClick={() => {
                setReplyTo(null);
                setReplyToAuthor('');
                setNewComment('');
              }}
            >
              –û—Ç–º–µ–Ω–∏—Ç—å
            </button>
          )}
          <button type="submit" className="submit-button">
            {replyTo ? "–û—Ç–≤–µ—Ç–∏—Ç—å" : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"}
          </button>
        </div>
      </form>

      <div className="comments-list">
        {rootComments.map(comment => renderComment(comment))}
      </div>
    </div>
  );
}

export default Comments; 